{"/home/travis/build/npmtest/node-npmtest-phridge/test.js":"/* istanbul instrument in package npmtest_phridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phridge/lib.npmtest_phridge.js":"/* istanbul instrument in package npmtest_phridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phridge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phridge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phridge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phridge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phridge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phridge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phridge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phridge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phridge.__dirname + '/lib.npmtest_phridge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/main.js":"exports.config = require(\"./config.js\");\nexports.spawn = require(\"./spawn.js\");\nexports.disposeAll = require(\"./disposeAll.js\");","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/config.js":"\"use strict\";\n\nmodule.exports = {\n    /**\n     * A writable stream where phridge will pipe PhantomJS' stdout messages.\n     *\n     * @type {stream.Writable}\n     * @default process.stdout\n     */\n    stdout: process.stdout,\n\n    /**\n     * A writable stream where phridge will pipe PhantomJS' stderr messages.\n     *\n     * @type {stream.Writable}\n     * @default process.stderr\n     */\n    stderr: process.stderr\n};","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/spawn.js":"\"use strict\";\n\nvar childProcess = require(\"child_process\");\nvar phantomjs = require(\"phantomjs-prebuilt\");\nvar config = require(\"./config.js\");\nvar fs = require(\"fs\");\nvar temp = require(\"temp\");\nvar path = require(\"path\");\nvar Phantom = require(\"./Phantom.js\");\nvar forkStdout = require(\"./forkStdout.js\");\nvar lift = require(\"./lift.js\");\n\nvar startScript = path.resolve(__dirname, \"./phantom/start.js\");\nvar writeFile = lift(fs.writeFile);\nvar close = lift(fs.close);\nvar open = lift(temp.open);\nvar initialMessage = \"message to node: hi\";\n\n/**\n * Spawns a new PhantomJS process with the given phantom config. Returns a Promises/A+ compliant promise\n * which resolves when the process is ready to execute commands.\n *\n * @see http://phantomjs.org/api/command-line.html\n * @param {Object} phantomJsConfig\n * @returns {Promise}\n */\nfunction spawn(phantomJsConfig) {\n    var args;\n    var configPath;\n    var stdout;\n    var stderr;\n    var child;\n\n    phantomJsConfig = phantomJsConfig || {};\n\n    // Saving a reference of the current stdout and stderr because this is (probably) the expected behaviour.\n    // If we wouldn't save a reference, the config of a later state would be applied because we have to\n    // do asynchronous tasks before piping the streams.\n    stdout = config.stdout;\n    stderr = config.stderr;\n\n    /**\n     * Step 1: Write the config\n     */\n    return open(null)\n        .then(function writeConfig(info) {\n            configPath = info.path;\n\n            // Pass config items in CLI style (--some-config) separately to avoid Phantom's JSON config bugs\n            // @see https://github.com/peerigon/phridge/issues/31\n            args = Object.keys(phantomJsConfig)\n                .filter(function filterCliStyle(configKey) {\n                    return configKey.charAt(0) === \"-\";\n                })\n                .map(function returnConfigValue(configKey) {\n                    var configValue = phantomJsConfig[configKey];\n\n                    delete phantomJsConfig[configKey];\n\n                    return configKey + \"=\" + configValue;\n                });\n\n            return writeFile(info.path, JSON.stringify(phantomJsConfig))\n                .then(function () {\n                    return close(info.fd);\n                });\n        })\n    /**\n     * Step 2: Start PhantomJS with the config path and pipe stderr and stdout.\n     */\n        .then(function startPhantom() {\n            return new Promise(function (resolve, reject) {\n                function onStdout(chunk) {\n                    var message = chunk.toString(\"utf8\");\n\n                    child.stdout.removeListener(\"data\", onStdout);\n                    child.stderr.removeListener(\"data\", onStderr);\n\n                    if (message.slice(0, initialMessage.length) === initialMessage) {\n                        resolve();\n                    } else {\n                        reject(new Error(message));\n                    }\n                }\n\n                // istanbul ignore next because there is no way to trigger stderr artificially in a test\n                function onStderr(chunk) {\n                    var message = chunk.toString(\"utf8\");\n\n                    child.stdout.removeListener(\"data\", onStdout);\n                    child.stderr.removeListener(\"data\", onStderr);\n\n                    reject(new Error(message));\n                }\n\n                args.push(\n                  \"--config=\" + configPath,\n                  startScript,\n                  configPath\n                );\n\n                child = childProcess.spawn(phantomjs.path, args);\n\n                prepareChildProcess(child);\n\n                child.stdout.on(\"data\", onStdout);\n                child.stderr.on(\"data\", onStderr);\n\n                // Our destination streams should not be ended if the childProcesses exists\n                // thus { end: false }\n                // @see https://github.com/peerigon/phridge/issues/27\n                if (stdout) {\n                    child.cleanStdout.pipe(stdout, { end: false });\n                }\n                if (stderr) {\n                    child.stderr.pipe(stderr, { end: false });\n                }\n            });\n        })\n    /**\n     * Step 3: Create the actual Phantom-instance and return it.\n     */\n        .then(function () {\n            return new Phantom(child);\n        });\n}\n\n/**\n * Prepares childProcess' stdout for communication with phridge. The childProcess gets two new properties:\n * - phridge: A stream which provides all messages to the phridge module\n * - cleanStdout: A stream which provides all the other data piped to stdout.\n *\n * @param {child_process.ChildProcess} childProcess\n * @private\n */\nfunction prepareChildProcess(childProcess) {\n    var stdoutFork = forkStdout(childProcess.stdout);\n\n    childProcess.cleanStdout = stdoutFork.cleanStdout;\n    childProcess.phridge = stdoutFork.phridge;\n    childProcess.on(\"exit\", disposeChildProcess);\n}\n\n/**\n * Clean up our childProcess extensions\n *\n * @private\n * @this ChildProcess\n */\nfunction disposeChildProcess() {\n    var childProcess = this;\n\n    childProcess.phridge.removeAllListeners();\n    childProcess.phridge = null;\n    childProcess.cleanStdout.removeAllListeners();\n    childProcess.cleanStdout = null;\n}\n\nmodule.exports = spawn;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/Phantom.js":"\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\nvar os = require(\"os\");\nvar instances = require(\"./instances.js\");\nvar Page = require(\"./Page.js\");\nvar serializeFn = require(\"./serializeFn.js\");\nvar phantomMethods = require(\"./phantom/methods.js\");\n\nvar pageId = 0;\nvar slice = Array.prototype.slice;\nvar pingInterval = 100;\nvar nextRequestId = 0;\n\n/**\n * Provides methods to run code within a given PhantomJS child-process.\n *\n * @constructor\n * @param {ChildProcess} childProcess\n */\nfunction Phantom(childProcess) {\n    Phantom.prototype.constructor.apply(this, arguments);\n}\n\nPhantom.prototype = Object.create(EventEmitter.prototype);\n\n/**\n * The ChildProcess-instance returned by node.\n *\n * @type {child_process.ChildProcess}\n */\nPhantom.prototype.childProcess = null;\n\n/**\n * Boolean flag which indicates that this process is about to exit or has already exited.\n *\n * @type {boolean}\n * @private\n */\nPhantom.prototype._isDisposed = false;\n\n/**\n * The current scheduled ping id as returned by setTimeout()\n *\n * @type {*}\n * @private\n */\nPhantom.prototype._pingTimeoutId = null;\n\n/**\n * The number of currently pending requests. This is necessary so we can stop the interval\n * when no requests are pending.\n *\n * @type {number}\n * @private\n */\nPhantom.prototype._pending = 0;\n\n/**\n * An object providing the resolve- and reject-function of all pending requests. Thus we can\n * resolve or reject a pending promise in a different scope.\n *\n * @type {Object}\n * @private\n */\nPhantom.prototype._pendingDeferreds = null;\n\n/**\n * A reference to the unexpected error which caused PhantomJS to exit.\n * Will be appended to the error message for pending deferreds.\n *\n * @type {Error}\n * @private\n */\nPhantom.prototype._unexpectedError = null;\n\n/**\n * Initializes a new Phantom instance.\n *\n * @param {child_process.ChildProcess} childProcess\n */\nPhantom.prototype.constructor = function (childProcess) {\n    EventEmitter.call(this);\n\n    this._receive = this._receive.bind(this);\n    this._write = this._write.bind(this);\n    this._afterExit = this._afterExit.bind(this);\n    this._onUnexpectedError = this._onUnexpectedError.bind(this);\n\n    this.childProcess = childProcess;\n    this._pendingDeferreds = {};\n\n    instances.push(this);\n\n    // Listen for stdout messages dedicated to phridge\n    childProcess.phridge.on(\"data\", this._receive);\n\n    // Add handlers for unexpected events\n    childProcess.on(\"exit\", this._onUnexpectedError);\n    childProcess.on(\"error\", this._onUnexpectedError);\n    childProcess.stdin.on(\"error\", this._onUnexpectedError);\n    childProcess.stdout.on(\"error\", this._onUnexpectedError);\n    childProcess.stderr.on(\"error\", this._onUnexpectedError);\n};\n\n/**\n * Stringifies the given function fn, sends it to PhantomJS and runs it in the scope of PhantomJS.\n * You may prepend any number of arguments which will be passed to fn inside of PhantomJS. Please note that all\n * arguments should be stringifyable with JSON.stringify().\n *\n * @param {...*} args\n * @param {Function} fn\n * @returns {Promise}\n */\nPhantom.prototype.run = function (args, fn) {\n    var self = this;\n\n    args = arguments;\n\n    return new Promise(function (resolve, reject) {\n        args = slice.call(args);\n        fn = args.pop();\n\n        self._send(\n            {\n                action: \"run\",\n                data: {\n                    src: serializeFn(fn, args)\n                }\n            },\n            args.length === fn.length\n        ).then(resolve, reject);\n    });\n};\n\n/**\n * Returns a new instance of a Page which can be used to run code in the context of a specific page.\n *\n * @returns {Page}\n */\nPhantom.prototype.createPage = function () {\n    var self = this;\n\n    return new Page(self, pageId++);\n};\n\n/**\n * Creates a new instance of Page, opens the given url and resolves when the page has been loaded.\n *\n * @param {string} url\n * @returns {Promise}\n */\nPhantom.prototype.openPage = function (url) {\n    var page = this.createPage();\n\n    return page.run(url, phantomMethods.openPage)\n        .then(function () {\n            return page;\n        });\n};\n\n/**\n * Exits the PhantomJS process cleanly and cleans up references.\n *\n * @see http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\n * @returns {Promise}\n */\nPhantom.prototype.dispose = function () {\n    var self = this;\n\n    return new Promise(function dispose(resolve, reject) {\n        if (self._isDisposed) {\n            resolve();\n            return;\n        }\n\n        // Remove handler for unexpected exits and add regular exit handlers\n        self.childProcess.removeListener(\"exit\", self._onUnexpectedError);\n        self.childProcess.on(\"exit\", self._afterExit);\n        self.childProcess.on(\"exit\", resolve);\n\n        self.removeAllListeners();\n\n        self.run(phantomMethods.exitPhantom).catch(reject);\n\n        self._beforeExit();\n    });\n};\n\n/**\n * Prepares the given message and writes it to childProcess.stdin.\n *\n * @param {Object} message\n * @param {boolean} fnIsSync\n * @returns {Promise}\n * @private\n */\nPhantom.prototype._send = function (message, fnIsSync) {\n    var self = this;\n\n    return new Promise(function (resolve, reject) {\n        message.from = new Error().stack\n            .split(/\\n/g)\n            .slice(1)\n            .join(\"\\n\");\n        message.id = nextRequestId++;\n\n        self._pendingDeferreds[message.id] = {\n            resolve: resolve,\n            reject: reject\n        };\n        if (!fnIsSync) {\n            self._schedulePing();\n        }\n        self._pending++;\n\n        self._write(message);\n    });\n};\n\n/**\n * Helper function that stringifies the given message-object, appends an end of line character\n * and writes it to childProcess.stdin.\n *\n * @param {Object} message\n * @private\n */\nPhantom.prototype._write = function (message) {\n    this.childProcess.stdin.write(JSON.stringify(message) + os.EOL, \"utf8\");\n};\n\n/**\n * Parses the given message via JSON.parse() and resolves or rejects the pending promise.\n *\n * @param {string} message\n * @private\n */\nPhantom.prototype._receive = function (message) {\n    // That's our initial hi message which should be ignored by this method\n    if (message === \"hi\") {\n        return;\n    }\n\n    // Not wrapping with try-catch here because if this message is invalid\n    // we have no chance to map it back to a pending promise.\n    // Luckily this JSON can't be invalid because it has been JSON.stringified by PhantomJS.\n    message = JSON.parse(message);\n\n    // pong messages are special\n    if (message.status === \"pong\") {\n        this._pingTimeoutId = null;\n\n        // If we're still waiting for a message, we need to schedule a new ping\n        if (this._pending > 0) {\n            this._schedulePing();\n        }\n        return;\n    }\n    this._resolveDeferred(message);\n};\n\n/**\n * Takes the required actions to respond on the given message.\n *\n * @param {Object} message\n * @private\n */\nPhantom.prototype._resolveDeferred = function (message) {\n    var deferred;\n\n    deferred = this._pendingDeferreds[message.id];\n\n    // istanbul ignore next because this is tested in a separated process and thus isn't recognized by istanbul\n    if (!deferred) {\n        // This happens when resolve() or reject() have been called twice\n        if (message.status === \"success\") {\n            throw new Error(\"Cannot call resolve() after the promise has already been resolved or rejected\");\n        } else if (message.status === \"fail\") {\n            throw new Error(\"Cannot call reject() after the promise has already been resolved or rejected\");\n        }\n    }\n\n    delete this._pendingDeferreds[message.id];\n    this._pending--;\n\n    if (message.status === \"success\") {\n        deferred.resolve(message.data);\n    } else {\n        deferred.reject(message.data);\n    }\n};\n\n/**\n * Sends a ping to the PhantomJS process after a given delay.\n * Check out lib/phantom/start.js for an explanation of the ping action.\n *\n * @private\n */\nPhantom.prototype._schedulePing = function () {\n    if (this._pingTimeoutId !== null) {\n        // There is already a ping scheduled. It's unnecessary to schedule another one.\n        return;\n    }\n    if (this._isDisposed) {\n        // No need to schedule a ping, this instance is about to be disposed.\n        // Catches rare edge cases where a pong message is received right after the instance has been disposed.\n        // @see https://github.com/peerigon/phridge/issues/41\n        return;\n    }\n    this._pingTimeoutId = setTimeout(this._write, pingInterval, { action: \"ping\" });\n};\n\n/**\n * This function is executed before the process is actually killed.\n * If the process was killed autonomously, however, it gets executed postmortem.\n *\n * @private\n */\nPhantom.prototype._beforeExit = function () {\n    var index;\n\n    this._isDisposed = true;\n\n    index = instances.indexOf(this);\n    index !== -1 && instances.splice(index, 1);\n    clearTimeout(this._pingTimeoutId);\n\n    // Seal the run()-method so that future calls will automatically be rejected.\n    this.run = runGuard;\n};\n\n/**\n * This function is executed after the process actually exited.\n *\n * @private\n */\nPhantom.prototype._afterExit = function () {\n    var deferreds = this._pendingDeferreds;\n    var errorMessage = \"Cannot communicate with PhantomJS process: \";\n    var error;\n\n    if (this._unexpectedError) {\n        errorMessage += this._unexpectedError.message;\n        error = new Error(errorMessage);\n        error.originalError = this._unexpectedError;\n    } else {\n        errorMessage += \"Unknown reason\";\n        error = new Error(errorMessage);\n    }\n\n    this.childProcess = null;\n\n    // When there are still any deferreds, we must reject them now\n    Object.keys(deferreds).forEach(function forEachPendingDeferred(id) {\n        deferreds[id].reject(error);\n        delete deferreds[id];\n    });\n};\n\n/**\n * Will be called as soon as an unexpected IO error happened on the attached PhantomJS process. Cleans up everything\n * and emits an unexpectedError event afterwards.\n *\n * Unexpected IO errors usually happen when the PhantomJS process was killed by another party. This can occur\n * on some OS when SIGINT is sent to the whole process group. In these cases, node throws EPIPE errors.\n * (https://github.com/peerigon/phridge/issues/34).\n *\n * @private\n * @param {Error} error\n */\nPhantom.prototype._onUnexpectedError = function (error) {\n    var errorMessage;\n\n    if (this._isDisposed) {\n        return;\n    }\n\n    errorMessage = \"PhantomJS exited unexpectedly\";\n    if (error) {\n        error.message = errorMessage + \": \" + error.message;\n    } else {\n        error = new Error(errorMessage);\n    }\n    this._unexpectedError = error;\n\n    this._beforeExit();\n    // Chainsaw against PhantomJS zombies\n    this.childProcess.kill(\"SIGKILL\");\n    this._afterExit();\n\n    this.emit(\"unexpectedExit\", error);\n};\n\n/**\n * Will be used as \"seal\" for the run method to prevent run() calls after dispose.\n * Appends the original error when there was unexpected error.\n *\n * @returns {Promise}\n * @this Phantom\n */\nfunction runGuard() {\n    var err = new Error(\"Cannot run function\");\n    var cause = this._unexpectedError ? this._unexpectedError.message : \"Phantom instance is already disposed\";\n\n    err.message += \": \" + cause;\n    err.originalError = this._unexpectedError;\n\n    return Promise.reject(err);\n}\n\nmodule.exports = Phantom;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/instances.js":"\"use strict\";\r\n\r\n/**\r\n * Stores all active Phantom instances. After phantom.dispose() has been called, the phantom instance will\r\n * be removed from this array.\r\n *\r\n * @private\r\n * @type {Array}\r\n */\r\nmodule.exports = [];","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/Page.js":"\"use strict\";\n\nvar serializeFn = require(\"./serializeFn.js\");\nvar phantomMethods = require(\"./phantom/methods.js\");\n\nvar slice = Array.prototype.slice;\n\n/**\n * A wrapper to run code within the context of a specific PhantomJS webpage.\n *\n * @see http://phantomjs.org/api/webpage/\n * @param {Phantom} phantom the parent PhantomJS instance\n * @param {number} id internal page id\n * @constructor\n */\nfunction Page(phantom, id) {\n    Page.prototype.constructor.apply(this, arguments);\n}\n\n/**\n * The parent phantom instance.\n *\n * @type {Phantom}\n */\nPage.prototype.phantom = null;\n\n/**\n * The internal page id.\n *\n * @private\n * @type {number}\n */\nPage.prototype._id = null;\n\n/**\n * Initializes the page instance.\n *\n * @param {Phantom} phantom\n * @param {number} id\n */\nPage.prototype.constructor = function (phantom, id) {\n    this.phantom = phantom;\n    this._id = id;\n};\n\n/**\n * Stringifies the given function fn, sends it to PhantomJS and runs it in the context of a particular PhantomJS webpage.\n * The PhantomJS webpage will be available as `this`. You may prepend any number of arguments which will be passed\n * to fn inside of PhantomJS. Please note that all arguments should be stringifyable with JSON.stringify().\n *\n * @param {...*} args\n * @param {Function} fn\n * @returns {Promise}\n */\nPage.prototype.run = function (args, fn) {\n    args = slice.call(arguments);\n\n    fn = args.pop();\n\n    return this.phantom._send({\n        action: \"run-on-page\",\n        data: {\n            src: serializeFn(fn, args),\n            pageId: this._id\n        }\n    }, args.length === fn.length);\n};\n\n/**\n * Runs a function inside of PhantomJS to cleanup memory. Call this function if you intent to not use the page-object\n * anymore.\n *\n * @see http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\n * @returns {Promise}\n */\nPage.prototype.dispose = function () {\n    var self = this;\n\n    return this.run(this._id, phantomMethods.disposePage)\n        .then(function () {\n            self.phantom = null;\n        });\n};\n\nmodule.exports = Page;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/serializeFn.js":"\"use strict\";\r\n\r\n/**\r\n * Serializes the function and its arguments to send it to stdin.\r\n *\r\n * @param {Function} fn\r\n * @param {Array} args\r\n * @returns {string}\r\n */\r\nfunction serializeFn(fn, args) {\r\n    var fnIsSync = args.length === fn.length;\r\n    var src;\r\n\r\n    args = args.map(JSON.stringify);\r\n    args.unshift(\"context\");\r\n\r\n    if (fnIsSync) {\r\n        src = \"resolve((\" + fn.toString() + \").call(\" + args.join() + \"));\";\r\n    } else {\r\n        args.push(\"resolve\", \"reject\");\r\n        src = \"(\" + fn.toString() + \").call(\" + args.join() + \");\";\r\n    }\r\n\r\n    // Currently sourceURLs aren't supported by PhantomJS but maybe in the future\r\n    return src + \"//# sourceURL=phridge.js\";\r\n}\r\n\r\nmodule.exports = serializeFn;","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/phantom/methods.js":"\"use strict\";\n\n/**\n * Opens the given page and resolves when PhantomJS called back.\n * Will be executed inside of PhantomJS.\n *\n * @private\n * @this Page\n * @param {string} url\n * @param {Function} resolve\n * @param {Function} reject\n */\nfunction openPage(url, resolve, reject) { /* jshint validthis: true */\n    this.open(url, function onPageLoaded(status) {\n        if (status !== \"success\") {\n            return reject(new Error(\"Cannot load \" + url + \": PhantomJS returned status \" + status));\n        }\n        resolve();\n    });\n}\n\n/**\n * Calls phantom.exit() with errorcode 0\n *\n * @private\n */\nfunction exitPhantom() { /* global phantom */\n    Object.keys(pages).forEach(function (pageId) {\n        // Closing all pages just to cleanup properly\n        pages[pageId].close();\n    });\n\n    // Using setTimeout(0) to ensure that all JS code still waiting in the queue is executed before exiting\n    // Otherwise PhantomJS prints a confusing security warning\n    // @see https://github.com/ariya/phantomjs/commit/1eec21ed5c887bf21a1a6833da3c98c68401d90e\n    setTimeout(function () {\n        phantom.exit(0);\n    }, 0);\n}\n\n/**\n * Cleans all references to a specific page.\n *\n * @private\n * @param {number} pageId\n */\nfunction disposePage(pageId) { /* global pages */\n    pages[pageId].close();\n    delete pages[pageId];\n}\n\nexports.openPage = openPage;\nexports.exitPhantom = exitPhantom;\nexports.disposePage = disposePage;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/forkStdout.js":"\"use strict\";\n\nvar os = require(\"os\");\nvar util = require(\"util\");\nvar ForkStream = require(\"fork-stream\");\nvar Linerstream = require(\"linerstream\");\nvar Transform = require(\"stream\").Transform;\n\nvar messageToNode = \"message to node: \";\n\n/**\n * Creates a fork stream which pipes messages starting with 'message to node: ' to our phridge stream\n * and any other message to the other stream. Thus console.log() inside PhantomJS is still printed to the\n * console while using stdout as communication channel for phridge.\n *\n * @param {stream.Readable} stdout\n * @returns {{phridge: stream.Readable, cleanStdout: stream.Readable}}\n */\nfunction forkStdout(stdout) {\n    var fork;\n    var phridgeEndpoint;\n    var cleanStdoutEndpoint;\n\n    // Expecting a character stream because we're splitting messages by an EOL-character\n    stdout.setEncoding(\"utf8\");\n\n    fork = new ForkStream({\n        classifier: function (chunk, done) {\n            chunk = chunk\n                .slice(0, messageToNode.length);\n            done(null, chunk === messageToNode);\n        }\n    });\n\n    stdout\n        .pipe(new Linerstream())\n        .pipe(fork);\n\n    // Removes the 'message to node: '-prefix from every chunk.\n    phridgeEndpoint = fork.a.pipe(new CropPhridgePrefix({\n        encoding: \"utf8\"\n    }));\n\n    // We need to restore EOL-character in stdout stream\n    cleanStdoutEndpoint = fork.b.pipe(new RestoreLineBreaks({\n        encoding: \"utf8\"\n    }));\n\n    return {\n        phridge: phridgeEndpoint,\n        cleanStdout: cleanStdoutEndpoint\n    };\n}\n\n/**\n * Appends an EOL-character to every chunk.\n *\n * @param {Object} options stream options\n * @constructor\n * @private\n */\nfunction RestoreLineBreaks(options) {\n    Transform.call(this, options);\n}\nutil.inherits(RestoreLineBreaks, Transform);\n\nRestoreLineBreaks.prototype._transform = function (chunk, enc, cb) {\n    this.push(chunk + os.EOL);\n    cb();\n};\n\n/**\n * Removes the 'message to node: '-prefix from every chunk.\n *\n * @param {Object} options stream options\n * @constructor\n * @private\n */\nfunction CropPhridgePrefix(options) {\n    Transform.call(this, options);\n}\nutil.inherits(CropPhridgePrefix, Transform);\n\nCropPhridgePrefix.prototype._transform = function (chunk, enc, cb) {\n    this.push(chunk.slice(messageToNode.length));\n    cb();\n};\n\nmodule.exports = forkStdout;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/lift.js":"\"use strict\";\n\nvar slice = Array.prototype.slice;\n\nfunction lift(fn) {\n    /**\n     * @this ctx\n     * @returns {Promise}\n     */\n    return function () {\n        var args = slice.call(arguments);\n        var ctx = this;\n\n        return new Promise(function (resolve, reject) {\n            args.push(function (err, result) {\n                err ? reject(err) : resolve(result);\n            });\n            fn.apply(ctx, args);\n        });\n    };\n}\n\nmodule.exports = lift;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/disposeAll.js":"\"use strict\";\n\nvar instances = require(\"./instances.js\");\n\n/**\n * Terminates all running PhantomJS processes. Returns a Promises/A+ compliant promise\n * which resolves when a processes terminated cleanly.\n *\n * @returns {Promise}\n */\nfunction disposeAll() {\n    var copy = instances.slice(0); // copy the array because phantom.dispose() will modify it\n\n    return Promise.all(copy.map(exit));\n}\n\n/**\n * @private\n * @param {Phantom} phantom\n * @returns {Promise}\n */\nfunction exit(phantom) {\n    return phantom.dispose();\n}\n\nmodule.exports = disposeAll;\n","/home/travis/build/npmtest/node-npmtest-phridge/node_modules/phridge/lib/phantom/start.js":"// Not using strict mode here because strict mode has an impact on evaled source code\n\n/* eslint-disable no-unused-vars, camelcase */\n// Yep, they are unused intentionally. They are just available for convenience reasons.\nvar webpage = require(\"webpage\");\nvar system = require(\"system\");\nvar fs = require(\"fs\");\nvar webserver = require(\"webserver\");\nvar child_process = require(\"child_process\");\nvar configPath = system.args[1];\nvar config = JSON.parse(fs.read(configPath));\n/*eslint-enable no-unused-vars, camelcase */\nvar pages = {};\nvar context = {};\nvar commandHandlers = {};\n\n/**\n * Reads a line from stdin and calls the requested command handler. Calls itself after setTimeout 0.\n */\nfunction loop() {\n    // stdin.readLine() is sync and halts until a whole line is read\n    var line = system.stdin.readLine();\n    var message = JSON.parse(line);\n    var handler = commandHandlers[message.action];\n\n    if (!handler) {\n        throw new Error(\"Unknown action '\" + message.action + \"'\");\n    }\n\n    handler(message);\n\n    setTimeout(loop, 0);\n}\n\n/**\n * Returns a function that should be called to return the result for this message.\n *\n * @param {Object} message\n * @returns {resolve}\n */\nfunction createResolver(message) {\n    /**\n     * @param {Object} data\n     */\n    function resolve(data) {\n        write({\n            status: \"success\",\n            id: message.done ? null : message.id,\n            data: data\n        });\n        message.done = true;\n    }\n\n    return resolve;\n}\n\n/**\n * Returns a function that should be called to indicate that this message yielded to an error.\n *\n * @param {Object} message\n * @returns {reject}\n */\nfunction createRejecter(message) {\n    /**\n     * @param {Object} data\n     */\n    function reject(data) {\n        var stack;\n\n        try {\n            throw new Error(data ? data.message || \"Error\" : \"Error\");\n        } catch (err) {\n            stack = err.stack;\n\n            stack += \"\\n\" +\n                \"    -----------------------------------------------------------------------\\n\" +\n                message.from;\n\n            data = {\n                message: err.message,\n                stack: stack\n            };\n        }\n\n        write({\n            status: \"fail\",\n            id: message.done ? null : message.id,\n            data: data\n        });\n        message.done = true;\n    }\n\n    return reject;\n}\n\n/**\n * Runs message.data.src in the given context.\n *\n * @param {Object} message\n * @param {Object} context\n */\nfunction run(message, context) {\n    var resolve = createResolver(message);\n    var reject = createRejecter(message);\n\n    try {\n        evalSrc(message.data.src, context, resolve, reject);\n    } catch (err) {\n        reject(err);\n    }\n}\n\n/**\n * Helper function for run() to avoid scope pollution. `context`, `resolve` and `reject` are needed according\n * to the serializeFn-module.\n *\n * @param {string} src\n * @param {object} context\n * @param {Function} resolve\n * @param {Function} reject\n */\nfunction evalSrc(src, context, resolve, reject) {\n    eval(src); // eslint-disable-line\n}\n\n/**\n * Helper function that stringifies the given object and writes it to system.stdout\n *\n * @param {Object} message\n */\nfunction write(message) {\n    system.stdout.writeLine(\"message to node: \" + JSON.stringify(message));\n}\n\n/**\n * Collection of request-able commands (as defined in the action-property of the message).\n *\n * @type {Object}\n */\ncommandHandlers = {\n\n    /**\n     * The ping command is a neat trick so PhantomJS isn't stuck in the stdin.readLine()-loop\n     * while waiting for an asynchronous event. A ping-command is sent by node as long as it\n     * waits for PhantomJS to respond. We're responding with a pong to tell node that we're waiting\n     * for the next ping.\n     */\n    ping: function () {\n        write({\n            status: \"pong\"\n        });\n    },\n\n    /**\n     * Runs message.data.src in the default context.\n     *\n     * @param {Object} message\n     */\n    run: function (message) {\n        run(message, context);\n    },\n\n    /**\n     * Runs message.data.src in the requested page context. If the page context doesn't exist, a new webpage\n     * is created implicitly.\n     *\n     * @param {Object} message\n     */\n    \"run-on-page\": function (message) {\n        var pageId = message.data.pageId;\n        var page = pages[pageId];\n\n        if (!page) {\n            pages[pageId] = page = webpage.create();\n        }\n\n        run(message, page);\n    }\n};\n\n// remove the config as it is not needed anymore\nfs.remove(configPath);\n\n// send hi to node so node knows that we're ready\nsystem.stdout.writeLine(\"message to node: hi\");\n\nloop();\n"}